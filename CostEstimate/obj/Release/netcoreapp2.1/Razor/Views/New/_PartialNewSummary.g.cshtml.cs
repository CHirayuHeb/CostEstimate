#pragma checksum "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b84a8dc7fab9186eed4eaacb12c9582989bdd60f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_New__PartialNewSummary), @"mvc.1.0.view", @"/Views/New/_PartialNewSummary.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/New/_PartialNewSummary.cshtml", typeof(AspNetCore.Views_New__PartialNewSummary))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\_ViewImports.cshtml"
using CostEstimate;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b84a8dc7fab9186eed4eaacb12c9582989bdd60f", @"/Views/New/_PartialNewSummary.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"03cd043d7b3157285994f12141f5133e7c84d925", @"/Views/_ViewImports.cshtml")]
    public class Views_New__PartialNewSummary : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<CostEstimate.Models.Common.Class>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Home/siteHome.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "number", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control "), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width:100%;font-size:12px;text-align:right;background-color:#FFD580"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("autocomplete", new global::Microsoft.AspNetCore.Html.HtmlString("off"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_TotalProcessWT"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_ProcessCost"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width:100%;font-size:12px;text-align:right;background-color:yellow"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_OrderMatl"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("min", new global::Microsoft.AspNetCore.Html.HtmlString("0"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_TotalCost"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_RoundUp"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width:100%;font-size:12px;text-align:right;background-color:#b1fab1;border:0px solid white"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("i_New_TotalProCost"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
  
    //string _Permission = User.Claims.FirstOrDefault(s => s.Type == "Permission").Value;
    string _NickName = User.Claims.FirstOrDefault(s => s.Type == "NICKNAME")?.Value;
    string _Name = User.Claims.FirstOrDefault(s => s.Type == "Name")?.Value;
    string _SurName = User.Claims.FirstOrDefault(s => s.Type == "SurName")?.Value;
    string _Division = User.Claims.FirstOrDefault(s => s.Type == "Division")?.Value;
    string _Section = User.Claims.FirstOrDefault(s => s.Type == "Section")?.Value;


#line default
#line hidden
            BeginContext(560, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f6c8a9049909454599688bc119d049b2", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(616, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(631, 23, true);
            WriteLiteral("<div class=\"row center\"");
            EndContext();
            BeginWriteAttribute("style", " style=\"", 654, "\"", 741, 1);
#line 13 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
WriteAttributeValue("", 662, Model._ViewceMastSubMakerRequest.smStep == 7 ? "pointer-events: none; " : "", 662, 79, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(742, 1098, true);
            WriteLiteral(@">

    <div class=""col-100 "" style=""border:1.5px solid gray;padding:10px"">
        <div class=""row center"">
            <div class=""col-5 "" style="""">
                <div class=""grid-item fw-800 center"" style=""text-align:left;text-decoration: underline;font-size:13px"">Summary</div>
            </div>
            <div class=""col-90 "" style="""">
            </div>
            <div class=""col-5 "" style="""">
            </div>
        </div>
        <div class=""row center"" style="""">
            <div class=""col-5 "" style=""margin-bottom:0px"">
            </div>
            <div class=""col-90"" style="" display: flex;align-items: center;"">
                <table class=""summarys"">
                    <tr>
                        <th>DETAIL</th>
                        <th width=""10%""></th>
                        <th style=""text-align:center"" width=""10%"">UNIT</th>
                    </tr>
                    <tr>
                        <td style=""text-align:left"">TOTAL PROCESS WT.</td>
         ");
            WriteLiteral("               <td style=\"text-align:right\">\r\n                            ");
            EndContext();
            BeginContext(1840, 227, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "3b61bfebf8cb4ec7a8ad23888c119f50", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
#line 38 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smTotalProcessWT);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2067, 285, true);
            WriteLiteral(@"
                        </td>
                        <td>Hr.</td>
                    </tr>
                    <tr>
                        <td style=""text-align:left"">TOTAL PROCESS COST.</td>
                        <td style=""text-align:right"">
                            ");
            EndContext();
            BeginContext(2352, 226, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "24d5ec721ef94384bcf398a478d15b92", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
#line 45 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smTotalProcessCost);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2578, 320, true);
            WriteLiteral(@"
                        </td>
                        <td>KB.</td>
                    </tr>
                    <tr>
                        <td style=""text-align:left;background-color:pink"">ORDER MATL</td>
                        <td style=""text-align:right;background-color:pink"">
                            ");
            EndContext();
            BeginContext(2898, 215, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "d689c7197e0c427bbd044293f9eadd21", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
#line 52 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smOrderMatl);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(3113, 306, true);
            WriteLiteral(@"
                        </td>
                        <td style=""background-color:pink"">KB.</td>
                    </tr>
                    <tr>
                        <td style=""text-align:left"">TOTAL COST</td>
                        <td style=""text-align:right"">
                            ");
            EndContext();
            BeginContext(3419, 217, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "327a1a1f6dc74bd9b7af79c01c262e17", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
#line 59 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smTotalCost);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(3636, 286, true);
            WriteLiteral(@"
                        </td>
                        <td>KB.</td>
                    </tr>
                    <tr>
                        <td style=""text-align:left"">ROUND UP T.PRO COST.</td>
                        <td style=""text-align:right"">
                            ");
            EndContext();
            BeginContext(3922, 213, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "7b193de726f24394bd560d14ab8a64eb", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
#line 66 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smRoundUp);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4135, 332, true);
            WriteLiteral(@"
                        </td>
                        <td>KB.</td>
                    </tr>
                    <tr>
                        <th style=""text-align:left;background-color:#98FB98;"">TOTAL PRO COST.</th>
                        <th style=""text-align:right;background-color:#98FB98"">
                            ");
            EndContext();
            BeginContext(4467, 246, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "20fde804f31540518c930138ff985239", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
#line 73 "C:\Users\t0015142\OneDrive - STANLEY ELECTRIC CO., LTD\Desktop\Work\MVC Project\CostEstimate\CostEstimate\Views\New\_PartialNewSummary.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model._ViewceMastSubMakerRequest.smTotalProCost);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("readonly", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4713, 28158, true);
            WriteLiteral(@"
                        </th>
                        <th style=""text-align:center;background-color:#98FB98;"">KB.</th>
                    </tr>

                </table>
            </div>

            <div class=""col-5 "" style="""">
            </div>
        </div>

    </div>

</div>

<script type=""text/javascript"">

    function calTotalProcessWT() {
        let sum = 0;
        let TotalsumMan = 0;
        let TotalsumAuto = 0;
        let TotalsumLabour_Rate = 0;
        let TotalsumDP_Rate = 0;
        let TotalsumME_Rate = 0;
        let TotalsumLabour_Cost = 0;
        let TotalsumDP_Cost = 0;
        let TotalsumME_Cost = 0;
        let TotalsumTotalCost = 0;

        // วน Loop ทุก Textbox ที่มี class .amount
        $("".WT_Man"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            //sum += value; // บวกค่า
            TotalsumMan += value;
        });

        $("".WT_Auto"").each(function () {");
            WriteLiteral(@"
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            // sum += value; // บวกค่า
            TotalsumAuto += value;
        });

        $("".Labour_Rate"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumLabour_Rate += value; // บวกค่า
        });
        $("".DP_Rate"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumDP_Rate += value; // บวกค่า
        });
        $("".ME_Rate"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumME_Rate += value; // บวกค่า
        });
        $("".Labour_Cost"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumLabour_Cost += value; // บวกค่า
        });
        $("".DP_Cost"").each(function () {");
            WriteLiteral(@"
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumDP_Cost += value; // บวกค่า
        });
        $("".ME_Cost"").each(function () {
            let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
            TotalsumME_Cost += value; // บวกค่า
        });


        //$(""#i_TotalPocessMan"").val(""111"");


        //$(""#i_TotalPocessMan"").val(TotalsumMan.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessAuto"").val(TotalsumAuto.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessLabour_Rate"").val(TotalsumLabour_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessDP_Rate"").val(TotalsumDP_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessME_Rate"").val(TotalsumME_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessLabour_Cost"").val(TotalsumLabour_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessD");
            WriteLiteral(@"P_Cost"").val(TotalsumDP_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        //$(""#i_TotalPocessME_Cost"").val(TotalsumME_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง

        // $(""#i_TotalPocessTotalCost"").val(TotalsumTotalCost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง





    }
    function calcRow(row) {
        // console.log('Class of this row in calcRow:', row.attr('class'));

        let WT_Man = parseFloat(row.find("".WT_Man"").val()) || 0;
        let Labour_Rate = parseFloat(row.find("".Labour_Rate"").val()) || 0;

        let WT_Auto = parseFloat(row.find("".WT_Auto"").val()) || 0;
        let DP_Rate = parseFloat(row.find("".DP_Rate"").val()) || 0;

        let ME_Rate = parseFloat(row.find("".ME_Rate"").val()) || 0;

        let Labour_Cost = WT_Man * Labour_Rate / 1000;


        //CAD-M. (MAN)
        //Group  NC. WT_Auto * ME_Rate / 1000; ยกเว้น CAD-M.
        let DP_Cost;
        let ME_Cost;
        if ((row.attr('class') || '').toLowerCase().includes('nc.')) {
            ");
            WriteLiteral(@"DP_Cost = WT_Auto * DP_Rate / 1000;
            ME_Cost = WT_Auto * ME_Rate / 1000;

        }
        else {
            DP_Cost = WT_Man * DP_Rate / 1000;
            ME_Cost = WT_Man * ME_Rate / 1000;

            //DP_Cost = WT_Auto * DP_Rate / 1000;
            //ME_Cost = WT_Man * ME_Rate / 1000;
        }





        let total = Labour_Cost + DP_Cost + ME_Cost;


        row.find("".Labour_Cost"").val(Labour_Cost.toFixed(2)); // Set Total
        row.find("".DP_Cost"").val(DP_Cost.toFixed(2)); // Set Total
        row.find("".ME_Cost"").val(ME_Cost.toFixed(2)); // Set Total


        row.find("".totalCost"").val(total.toFixed(2)); // Set Total

        // row.find("".total"").val(total.toFixed(2)); // Set Total
    }
    // Function คำนวณรวมทุกแถว
    function calcAll() {
        let sum = 0;
        //$(""#tbDetailSubMakerRequest tbody tr"").each(function () {
        $(""#tbDetailSubMakerRequest tr"").each(function () {
            calcRow($(this)); // เรียก Function คำนวณแถว
   ");
            WriteLiteral(@"         sum += parseFloat($(this).find("".totalCost"").val()) || 0;
        });

        $(""#i_New_ProcessCost"").val(sum.toFixed(2)); // Set ค่า Sum Total
    }
    function FuntionTotalProCost() {

        let TotalProcessWT = document.getElementById(""i_New_TotalProcessWT"") ? parseFloat(document.getElementById(""i_New_TotalProcessWT"").value) || 0 : 0;//N15

        let ProcessCost = document.getElementById(""i_New_ProcessCost"") ? parseFloat(document.getElementById(""i_New_ProcessCost"").value) || 0 : 0; //16
        let New_OrderMatl = document.getElementById(""i_New_OrderMatl"") ? parseFloat(document.getElementById(""i_New_OrderMatl"").value) || 0 : 0;//17
        let TotalCost = document.getElementById(""i_New_TotalCost"") ? parseFloat(document.getElementById(""i_New_TotalCost"").value) || 0 : 0;//18
        let New_RoundUp = document.getElementById(""i_New_RoundUp"") ? parseFloat(document.getElementById(""i_New_RoundUp"").value) || 0 : 0;//19

        let i_New_TotalCost = parseFloat(ProcessCost + New_OrderM");
            WriteLiteral(@"atl).toFixed(2);
        //let roundedUp = Math.ceil(parseFloat(ProcessCost + New_OrderMatl).toFixed(2));
        //console.log(""roundedUp "" + roundedUp + ""i_New_TotalCost : "" + i_New_TotalCost); // 13
        let i_New_RoundUp = Math.ceil(parseFloat(ProcessCost + New_OrderMatl).toFixed(2));
        //let i_New_TotalProCost = parseFloat(TotalProcessWT + ProcessCost + New_OrderMatl + TotalCost + New_RoundUp).toFixed(2);
        //console.log(""roundedUp "" + i_New_RoundUp);
        let TotalsumMAN = 0;
        let TotalsumTOTAL = 0;
        $('input.dsWT_Auto').each(function () {
            const className = ($(this).attr('class') || '').toLowerCase();
            let value = 0;
            if (className.includes('nc.')) {
                // ทำอะไรกับ element ที่มี ""NC.""
                let value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
                TotalsumMAN += value
            }
        });

        $('input.dsWT_Man').each(function () {
            const c");
            WriteLiteral(@"lassName = ($(this).attr('class') || '').toLowerCase();
            let value = 0;
            if (!className.includes('nc.')) {
                // ทำอะไรกับ element ที่มี ""NC.""
                value = parseFloat($(this).val()) || 0; // อ่านค่า + เช็คถ้าไม่มีให้เป็น 0
                TotalsumTOTAL += value;


            }
        });

        $(""#i_New_TotalProcessWT"").val((TotalsumTOTAL + TotalsumMAN).toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง

        $(""#i_New_TotalCost"").val(i_New_TotalCost); // Set ค่า Sum Total
        $(""#i_New_RoundUp"").val(i_New_RoundUp); // Set ค่า Sum Total
        $(""#i_New_TotalProCost"").val(i_New_RoundUp);  // Set ค่า Sum Total


        //if ((row.attr('class') || '').toLowerCase().includes('nc.')) {

    }
    function sumValuesByGroupdsWT_Man() {
        var groupSumsWT_Man = {};  // Object to store sums for each group
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the");
            WriteLiteral(@" class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".WT_Man"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsWT_Man[groupClass]) {
                    groupSumsWT_Man[groupClass] = 0;
                }
                groupSumsWT_Man[groupClass] += rowWT_Man;
            }
        });

        $.each(groupSumsWT_Man, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            //console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\");
            WriteLiteral(@"\."" + str.slice(lastIndex + 1);
            }
            //console.log('WT_Man <p>' + str + ' Total: ' + total + '</p>');
            $("".dsWT_Man"" + ""."" + str).each(function () {
                // parseFloat(total).toFixed(2);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });

    }
    function sumValuesByGroupdsWT_Auto() {
        var groupSumsWT_Man = {};  // Object to store sums for each group
        var groupSumsWT_Auto = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".WT_Auto"").each(function () {
                 ");
            WriteLiteral(@"   rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsWT_Auto[groupClass]) {
                    groupSumsWT_Auto[groupClass] = 0;
                }
                groupSumsWT_Auto[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsWT_Auto, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            //console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            // console.log('dsWT_Auto <p>' + str + ' Total: ' + total + '</p>');
            $("".dsWT_Auto"" + ""."" + str).each(function () {
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
  ");
            WriteLiteral(@"              // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsLabour_Rate() {
        var groupSumsWT_Man = {};  // Object to store sums for each group
        var groupSumsWT_Auto = {};
        var groupSumsLabour_Rate = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".Labour_Rate"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
  ");
            WriteLiteral(@"              groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            // console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            //console.log('dsLabour_Rate <p>' + str + ' Total: ' + total + '</p>');
            $("".dsLabour_Rate"" + ""."" + str).each(function () {
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsDP_Rate() {

        var groupSumsLabour_Rate = {");
            WriteLiteral(@"};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".DP_Rate"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
                groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            // console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str");
            WriteLiteral(@".lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            //console.log('dsDP_Rate <p>' + str + ' Total: ' + total + '</p>');
            $("".dsDP_Rate"" + ""."" + str).each(function () {
                //$(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsME_Rate() {
        var groupSumsLabour_Rate = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the curre");
            WriteLiteral(@"nt row
                $(this).find("".ME_Rate"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
                groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            // console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            // console.log('dsME_Rate <p>' + str + ' Total: ' + total + '</p>');
            $("".dsME_Rate"" + ""."" + str).each(function () {");
            WriteLiteral(@"
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsLabour_Cost() {
        var groupSumsLabour_Rate = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".Labour_Cost"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
          ");
            WriteLiteral(@"      groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            //console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            // console.log('dsLabour_Cost <p>' + str + ' Total: ' + total + '</p>');
            $("".dsLabour_Cost"" + ""."" + str).each(function () {
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsDP_Cost() {
        var groupSumsLabour_Rate = {};
      ");
            WriteLiteral(@"  // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".DP_Cost"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
                groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            //console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexO");
            WriteLiteral(@"f('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            //console.log('dsDP_Cost <p>' + str + ' Total: ' + total + '</p>');
            $("".dsDP_Cost"" + ""."" + str).each(function () {
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsME_Cost() {
        var groupSumsLabour_Rate = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
  ");
            WriteLiteral(@"              $(this).find("".ME_Cost"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
                groupSumsLabour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            // console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            //console.log('dsME_Cost <p>' + str + ' Total: ' + total + '</p>');
            $("".dsME_Cost"" + ""."" + str).each(function () {
          ");
            WriteLiteral(@"      // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }
    function sumValuesByGroupdsTotalCost() {
        var groupSumsLabour_Rate = {};
        // Iterate through each group
        $(""tr"").each(function () {
            var groupClass = $(this).attr(""class"");  // Get the class of the current row (group)
            if (groupClass) {
                var rowWT_Man = 0;
                var rowWT_Auto = 0;
                // Sum the values of .WT_Man and .WT_Auto in the current row
                $(this).find("".totalCost"").each(function () {
                    rowWT_Man += parseFloat($(this).val()) || 0;  // Add value, default to 0 if invalid
                });
                if (!groupSumsLabour_Rate[groupClass]) {
                    groupSumsLabour_Rate[groupClass] = 0;
                }
                groupSums");
            WriteLiteral(@"Labour_Rate[groupClass] += rowWT_Man;
            }
        });
        $.each(groupSumsLabour_Rate, function (group, total) {
            //dsWT_Auto HW.
            let str = group;
            // console.log('group' + group);
            // Find the last index of the period
            let lastIndex = str.lastIndexOf('.');
            if (lastIndex !== -1) {
                // Replace the last period with ""\\.""
                str = str.slice(0, lastIndex) + ""\\."" + str.slice(lastIndex + 1);
            }
            //console.log('dsME_Cost <p>' + str + ' Total: ' + total + '</p>');
            $("".dsTotalCost"" + ""."" + str).each(function () {
                // $(this).val(total);
                $(this).val(parseFloat(total).toFixed(2));
                // console.log(""Value of textbox with classes 'dsWT_Man DESIGN': "" + $(this).val());
            });
        });


    }

    function sumtotalProcess() {
        let TotalsumTotalCost = 0;
        $(""#tbDetailSubMakerRequest tr""");
            WriteLiteral(@").each(function () {
            let sum = parseFloat($(this).find("".dsTotalCost"").val()) || 0;
            TotalsumTotalCost += sum;
            // calcRow($(this)); // เรียก Function คำนวณแถว
            // sum += parseFloat($(this).find("".dsTotalCost"").val()) || 0;
        });

        let TotalsumWT_Man = 0;
        let TotalsumWT_Auto = 0;
        let TotalsumWdsLabour_Rate = 0;
        let TotalsumWdsLabour_Cost = 0;
        let TotalsumWdsDP_Rate = 0;
        let TotalsumWdsDP_Cost = 0;
        let TotalsumWdsME_Rate = 0;
        let TotalsumWdsME_Cost = 0;

        $(""#tbDetailSubMakerRequest tr"").each(function () {
            let sum = parseFloat($(this).find("".dsWT_Man"").val()) || 0;
            let sum1 = parseFloat($(this).find("".dsWT_Auto"").val()) || 0;
            let sum2 = parseFloat($(this).find("".dsLabour_Rate"").val()) || 0;
            let sum3 = parseFloat($(this).find("".dsLabour_Cost"").val()) || 0;
            let sum4 = parseFloat($(this).find("".dsDP_Rate"").val()) |");
            WriteLiteral(@"| 0;
            let sum5 = parseFloat($(this).find("".dsDP_Cost"").val()) || 0;
            let sum6 = parseFloat($(this).find("".dsME_Rate"").val()) || 0;
            let sum7 = parseFloat($(this).find("".dsME_Cost"").val()) || 0;

            TotalsumWT_Man += sum;
            TotalsumWT_Auto += sum1;
            TotalsumWdsLabour_Rate += sum2;
            TotalsumWdsLabour_Cost += sum3;
            TotalsumWdsDP_Rate += sum4;
            TotalsumWdsDP_Cost += sum5;
            TotalsumWdsME_Rate += sum6;
            TotalsumWdsME_Cost += sum7;
        });
        $(""#i_TotalPocessMan"").val(TotalsumWT_Man.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessAuto"").val(TotalsumWT_Auto.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessLabour_Rate"").val(TotalsumWdsLabour_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessLabour_Cost"").val(TotalsumWdsLabour_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessDP_Rate"").val(TotalsumWdsDP");
            WriteLiteral(@"_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessDP_Cost"").val(TotalsumWdsDP_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessME_Rate"").val(TotalsumWdsME_Rate.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง
        $(""#i_TotalPocessME_Cost"").val(TotalsumWdsME_Cost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง




        $(""#i_TotalPocessTotalCost"").val(TotalsumTotalCost.toFixed(2)); // Format ทศนิยม 2 ตำแหน่ง

    }

    $(document).on(""keyup change"", "".WT_Man, .WT_Auto"", function () {

        sumValuesByGroupdsWT_Man();
        sumValuesByGroupdsWT_Auto();
        sumValuesByGroupdsLabour_Rate();
        sumValuesByGroupdsDP_Rate();
        sumValuesByGroupdsME_Rate();
        sumValuesByGroupdsLabour_Cost();
        sumValuesByGroupdsDP_Cost();
        sumValuesByGroupdsME_Cost();
        sumValuesByGroupdsTotalCost();
        sumtotalProcess();

        //calTotalProcessWT();
        calcAll();
        FuntionTotalProCost();

        ////reload ?");
            WriteLiteral(@"
        //sumValuesByGroupdsWT_Man();
        //sumValuesByGroupdsWT_Auto();
        //sumValuesByGroupdsLabour_Rate();
        //sumValuesByGroupdsDP_Rate();
        //sumValuesByGroupdsME_Rate();
        //sumValuesByGroupdsLabour_Cost();
        //sumValuesByGroupdsDP_Cost();
        //sumValuesByGroupdsME_Cost();
        //sumValuesByGroupdsTotalCost();
        //sumtotalProcess();

        //calTotalProcessWT();
        //calcAll();
        //FuntionTotalProCost();
    });




    $(""#tbDetailSubMakerRequest input"").attr(""class"", function (i, c) {
        return c ? c.replace(/\bvalid\b/g, """").trim() : """";
    });




    sumValuesByGroupdsWT_Man();
    sumValuesByGroupdsWT_Auto();
    sumValuesByGroupdsLabour_Rate();
    sumValuesByGroupdsDP_Rate();
    sumValuesByGroupdsME_Rate();
    sumValuesByGroupdsLabour_Cost();
    sumValuesByGroupdsDP_Cost();
    sumValuesByGroupdsME_Cost();
    sumValuesByGroupdsTotalCost();

    calTotalProcessWT();
    calcAll();
    Fun");
            WriteLiteral(@"tionTotalProCost();

    //why reload again ? anwser: i don t know but can work.....
    sumValuesByGroupdsWT_Man();
    sumValuesByGroupdsWT_Auto();
    sumValuesByGroupdsLabour_Rate();
    sumValuesByGroupdsDP_Rate();
    sumValuesByGroupdsME_Rate();
    sumValuesByGroupdsLabour_Cost();
    sumValuesByGroupdsDP_Cost();
    sumValuesByGroupdsME_Cost();
    sumValuesByGroupdsTotalCost();
    sumtotalProcess();

    calTotalProcessWT();
    calcAll();
    FuntionTotalProCost();

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<CostEstimate.Models.Common.Class> Html { get; private set; }
    }
}
#pragma warning restore 1591
